/*
 * authentik
 *
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2025.6.0
 * Contact: hello@goauthentik.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MutualTlsStageRequest : MutualTLSStage Serializer
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MutualTlsStageRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "flow_set", skip_serializing_if = "Option::is_none")]
    pub flow_set: Option<Vec<models::FlowSetRequest>>,
    #[serde(rename = "mode")]
    pub mode: models::MutualTlsStageModeEnum,
    /// Configure certificate authorities to validate the certificate against. This option has a higher priority than the `client_certificate` option on `Brand`.
    #[serde(rename = "certificate_authorities", skip_serializing_if = "Option::is_none")]
    pub certificate_authorities: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "cert_attribute")]
    pub cert_attribute: models::CertAttributeEnum,
    #[serde(rename = "user_attribute")]
    pub user_attribute: models::UserAttributeEnum,
}

impl MutualTlsStageRequest {
    /// MutualTLSStage Serializer
    pub fn new(
        name: String,
        mode: models::MutualTlsStageModeEnum,
        cert_attribute: models::CertAttributeEnum,
        user_attribute: models::UserAttributeEnum,
    ) -> MutualTlsStageRequest {
        MutualTlsStageRequest {
            name,
            flow_set: None,
            mode,
            certificate_authorities: None,
            cert_attribute,
            user_attribute,
        }
    }
}
