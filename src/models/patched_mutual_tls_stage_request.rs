/*
 * authentik
 *
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2025.8.1
 * Contact: hello@goauthentik.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PatchedMutualTlsStageRequest : MutualTLSStage Serializer
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchedMutualTlsStageRequest {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "flow_set", skip_serializing_if = "Option::is_none")]
    pub flow_set: Option<Vec<models::FlowSetRequest>>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<models::MutualTlsStageModeEnum>,
    /// Configure certificate authorities to validate the certificate against. This option has a higher priority than the `client_certificate` option on `Brand`.
    #[serde(rename = "certificate_authorities", skip_serializing_if = "Option::is_none")]
    pub certificate_authorities: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "cert_attribute", skip_serializing_if = "Option::is_none")]
    pub cert_attribute: Option<models::CertAttributeEnum>,
    #[serde(rename = "user_attribute", skip_serializing_if = "Option::is_none")]
    pub user_attribute: Option<models::UserAttributeEnum>,
}

impl PatchedMutualTlsStageRequest {
    /// MutualTLSStage Serializer
    pub fn new() -> PatchedMutualTlsStageRequest {
        PatchedMutualTlsStageRequest {
            name: None,
            flow_set: None,
            mode: None,
            certificate_authorities: None,
            cert_attribute: None,
            user_attribute: None,
        }
    }
}
