/*
 * authentik
 *
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2025.8.4
 * Contact: hello@goauthentik.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UniquePasswordPolicyRequest : Password Uniqueness Policy Serializer
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UniquePasswordPolicyRequest {
    #[serde(rename = "name")]
    pub name: String,
    /// When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    #[serde(rename = "execution_logging", skip_serializing_if = "Option::is_none")]
    pub execution_logging: Option<bool>,
    /// Field key to check, field keys defined in Prompt stages are available.
    #[serde(rename = "password_field", skip_serializing_if = "Option::is_none")]
    pub password_field: Option<String>,
    /// Number of passwords to check against.
    #[serde(rename = "num_historical_passwords", skip_serializing_if = "Option::is_none")]
    pub num_historical_passwords: Option<u32>,
}

impl UniquePasswordPolicyRequest {
    /// Password Uniqueness Policy Serializer
    pub fn new(name: String) -> UniquePasswordPolicyRequest {
        UniquePasswordPolicyRequest {
            name,
            execution_logging: None,
            password_field: None,
            num_historical_passwords: None,
        }
    }
}
